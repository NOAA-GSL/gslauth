"""
Django settings for gslauth project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys
import datetime
import json

from pathlib import Path
from django.utils.safestring import mark_safe
from django.core.exceptions import ImproperlyConfigured

# (new in Django 3.2)
#
# Either add this into settings.py
DEFAULT_AUTO_FIELD='django.db.models.AutoField'
# ... or
#
# class Topic(models.Model):
#     id = models.AutoField(primary_key=True)
#     ...

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# https://stackoverflow.com/questions/42077532/django-security-and-settings
with open(os.path.join(BASE_DIR, 'secrets.json')) as secrets_file:
    jsonsecrets = json.load(secrets_file)

def get_secret(key):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return jsonsecrets[key]
    except KeyError:
        print("ImproperlyConfigured -- Missing value for key {}".format(key))
        raise ImproperlyConfigured("Missing value for key {}".format(key))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Expire the session after an hour
SESSION_COOKIE_AGE = 3600
LOGOUT_EXPIRY = 1
CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False

# https://stackoverflow.com/questions/8023126/how-can-i-test-https-connections-with-django-as-easily-as-i-can-non-https-conne1826
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

if DEBUG:
    SESSION_COOKIE_AGE = 10 * SESSION_COOKIE_AGE
else:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# tailored from https://www.webforefront.com/django/setupdjangologging.html
# unfortunately, cannot use a variable to enforce DRY for basepath
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'development_logfile': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': '/home/holub/logs/gslauth/django_dev.log',
            'formatter': 'verbose'
        },
        'info_logfile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/home/holub/logs/gslauth/django_info.log',
            'formatter': 'verbose'
        },
        'production_logfile': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/home/holub/logs/gslauth/django_production.log',
            'maxBytes': 1024 * 1024 * 1024 * 100,  # 100GB
            'backupCount': 5,
            'formatter': 'simple'
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'django.request': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'django.server': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'gslauth': {
            'handlers': ['development_logfile', 'info_logfile', 'production_logfile'],
        },
        'py.warnings': {
            'handlers': ['development_logfile'],
        },
    }
}


HTTP_PROXY = "http://rhsm-proxy.gsd.esrl.noaa.gov:3128"


# https://pypi.org/project/django-auth-oidc/
AUTH_SERVER = get_secret('AUTH_SERVER')
AUTH_CLIENT_ID = get_secret('AUTH_CLIENT_ID')
AUTH_CLIENT_SECRET = get_secret('AUTH_CLIENT_SECRET')

# https://developers.login.gov/attributes/
AUTH_SCOPE = ["uuid", "profile:name", "given_name", "family_name"]

# Application definition

INSTALLED_APPS = [
    'gslauth',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gslauth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'gslauth.context_processors.deploy_env',
                'gslauth.context_processors.server_url',
            ],
        },
    },
]

WSGI_APPLICATION = 'gslauth.wsgi.application'
GSLAUTH_DEPLOY_ENV = 'Development'

if GSLAUTH_DEPLOY_ENV == "Development":
    DEPLOY_ENV_COLOR = '#ff6666'  # light red
    DEPLOY_ENV_TEXT_COLOR = 'gold'
    DEBUG = True
    SERVER_FQDN = 'qrba-dev.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.164.39'

elif GSLAUTH_DEPLOY_ENV == "Integration":
    DEPLOY_ENV_COLOR = '#99ff99'  # light green
    DEPLOY_ENV_TEXT_COLOR = 'black'
    SERVER_FQDN = '?.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.164.y'

elif GSLAUTH_DEPLOY_ENV == "Production":
    DEPLOY_ENV_COLOR = "#3399ff"  # blue
    DEPLOY_ENV_TEXT_COLOR = 'gold'
    SERVER_FQDN = '?.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.164.x'

else:
    msg = "environment variable QRBA3_DEPLOY_ENVIRONMENT not set.  " \
          "Supported values: Development, Integration, Production"
    print(msg)
    sys.exit(-1)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', SERVER_FQDN, SERVER_IP]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASENAME = BASE_DIR + '/gslauth/db.sqlite3'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATABASENAME,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# https://developers.login.gov/oidc/
LOGINDOTGOV_IDP_SERVER = 'https://idp.int.identitysandbox.gov'
LOGINDOTGOV_CLIENT_ID = 'urn:gov:gsa:openidconnect.profiles:sp:sso:noaa_oar:gslauth'

# Basic identity assurance, does not require identity verification (this is the most common value).
LOGINDOTGOV_ACR = 'http://idmanagement.gov/ns/assurance/ial/2'
LOGINDOTGOV_CLIENT_ASSERTION_TYPE = 'urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer'
LOGINDOTGOV_SCOPE = 'openid+email+profile+first_name+last_name'
LOGINDOTGOV_RETURN_TO = 'https://qrba-dev.gsd.esrl.noaa.gov/gslauth/logindotgov_authenticated'
LOGINDOTGOV_AUTHENTICATED_REDIRECT = 'https://qrba-dev.gsd.esrl.noaa.gov/static/test.html'
LOGINDOTGOV_ERROR_REDIRECT = 'https://qrba-dev.gsd.esrl.noaa.gov/static/oops.html'
LOGINDOTGOV_LOGOUT_URI = 'https://qrba-dev.gsd.esrl.noaa.gov/static/test.html'

# A known parameter return on auth sucess .... can be whatever we want as long as its > 22 chars
LOGINDOTGOV_LOGIN_STATE = '2.7182818284590452353602874'
LOGINDOTGOV_LOGOUT_STATE = '1.618033988749894848204586'
with open(os.path.join(BASE_DIR, 'logindotgov/certs/private.pem')) as privcert:
    LOGINDOTGOV_PRIVATE_CERT = privcert.read()

# safe token length
JWTSAFELEN = 30
# JWT expiration time in seconds -- will be added to current UTC
JWTEXP = 300